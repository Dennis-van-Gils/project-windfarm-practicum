#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Provides class `WindFarmData`.
"""
__author__ = "Dennis van Gils"
__authoremail__ = "vangils.dennis@gmail.com"
__url__ = "https://github.com/Dennis-van-Gils/project-windfarm-practicum"
__date__ = "14-11-2024"
__version__ = "2.0"

import os
import sys
from pathlib import Path
from tkinter import filedialog

import numpy as np
import matplotlib.pyplot as plt

# plt.style.use("default")
plt.style.use("dark_background")
plt.rcParams["grid.color"] = "gray"
plt.rcParams["font.size"] = 12
plt.rcParams["axes.titlesize"] = 14
plt.rcParams["axes.labelsize"] = 14

# ------------------------------------------------------------------------------
#   Constants
# ------------------------------------------------------------------------------

# fmt: off
# RGB color values
COLOR_PEN_RED       = [1  , 0.08, 0.08]
COLOR_PEN_ORANGE    = [1  , 0.5 , 0.15]
COLOR_PEN_YELLOW    = [1  , 1   , 0.54]
COLOR_PEN_GREEN     = [0  , 0.78, 0   ]
COLOR_PEN_TURQUOISE = [0  , 1   , 1   ]
COLOR_PEN_BLUE      = [0  , 0.51, 1   ]
COLOR_PEN_PINK      = [1  , 0.12, 0.71]
COLOR_PEN_WHITE     = [1  , 1   , 1   ]
# fmt: on

COLOR_MAP = [
    COLOR_PEN_RED,
    COLOR_PEN_ORANGE,
    COLOR_PEN_YELLOW,
    COLOR_PEN_GREEN,
    COLOR_PEN_TURQUOISE,
    COLOR_PEN_BLUE,
]
"""Color map over all 6 turbines"""

# ------------------------------------------------------------------------------
#   WindFarmData
# ------------------------------------------------------------------------------


class WindFarmData:
    """Manages the timeseries logged by the Arduino Wind Farm control program.

    Args:
        filepath (`pathlib.Path` | `str` | `None`, optional):
            Path to the log file to open. Opens a file browser when omitted.

    Main attributes:
        avg_P (`numpy.ndarray[float])`):
            List of the power average per wind turbine [mW].

        std_P (`numpy.ndarray[float])`):
            List of the power standard deviation per wind turbine [mW].

        time (`numpy.ndarray[float])`):
            Time [s]

        P_n (`numpy.ndarray[float])`):
            Timeseries of the power [mW] generated by turbine `n`, where
            `1 <= n <= 6`.

        E_n (`numpy.ndarray[float])`):
            Timeseries of the accumulated energy [J] generated by turbine `n`,
            where `1 <= n <= 6`.

    Main methods:
        read_file()

        quick_plot()
    """

    def __init__(self, filepath: Path | str | None = None):
        self.filepath = ""
        """Full file path"""
        self.filename = ""
        """Filename without extension"""
        self.header = ""
        """Header"""

        self.avg_P = np.zeros(6)
        """List of the power average per wind turbine over the full time [mW]"""
        self.std_P = np.zeros(6)
        """List of the power standard deviation per wind turbine over the full
        time[mW]"""

        self.time = np.array([np.nan])
        """Time [s]"""

        self.P_1 = np.array([np.nan])
        """Power timeseries of turbine 1 [mW]"""
        self.P_2 = np.array([np.nan])
        """Power timeseries of turbine 2 [mW]"""
        self.P_3 = np.array([np.nan])
        """Power timeseries of turbine 3 [mW]"""
        self.P_4 = np.array([np.nan])
        """Power timeseries of turbine 4 [mW]"""
        self.P_5 = np.array([np.nan])
        """Power timeseries of turbine 5 [mW]"""
        self.P_6 = np.array([np.nan])
        """Power timeseries of turbine 6 [mW]"""

        self.E_1 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 1 [J]"""
        self.E_2 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 2 [J]"""
        self.E_3 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 3 [J]"""
        self.E_4 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 4 [J]"""
        self.E_5 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 5 [J]"""
        self.E_6 = np.array([np.nan])
        """Cumulative energy timeseries of turbine 6 [J]"""

        self.read_file(filepath=filepath)

    # --------------------------------------------------------------------------
    #   read_file
    # --------------------------------------------------------------------------

    def read_file(self, filepath: Path | str | None = None):
        """Read in a log file acquired by the Wind Farm control program.

        Args:
            filepath (`pathlib.Path` | `str` | `None`, optional):
                Path to the log file to open. Opens a file browser when omitted.
        """
        if filepath == "" or filepath is None:
            filepath = filedialog.askopenfilename(
                filetypes=[("Text Files", "*.txt")],
                title="Open Wind Farm log file",
            )
            if filepath is None or filepath == "." or filepath == "":
                # User pressed cancel.
                sys.exit(0)

        if isinstance(filepath, str):
            filepath = Path(filepath)

        if not filepath.is_file():
            raise IOError(f"File can not be found: {filepath}")

        self.filepath = f"{filepath}"
        self.filename = filepath.stem

        with filepath.open() as f:
            # The first line is expected to be the header
            try:
                self.header = f.readline().strip()
            except UnicodeDecodeError as e:
                raise TypeError("Unexpected file format.") from e

        # The remaining lines are expected to contain tab-delimited data values
        try:
            raw_data = np.loadtxt(filepath, skiprows=1, delimiter="\t")
        except ValueError as e:
            raise ValueError("Unexpected file format.") from e

        try:
            # fmt: off
            self.time = raw_data[:,  0]
            self.P_1  = raw_data[:,  1]
            self.E_1  = raw_data[:,  2]
            self.P_2  = raw_data[:,  3]
            self.E_2  = raw_data[:,  4]
            self.P_3  = raw_data[:,  5]
            self.E_3  = raw_data[:,  6]
            self.P_4  = raw_data[:,  7]
            self.E_4  = raw_data[:,  8]
            self.P_5  = raw_data[:,  9]
            self.E_5  = raw_data[:, 10]
            self.P_6  = raw_data[:, 11]
            self.E_6  = raw_data[:, 12]
            # fmt: on
        except IndexError as e:
            raise IndexError("Wrong number of data columns in file.") from e

        # Offset time to always start at 0
        self.time -= self.time[0]

        # Offset accumulated energies to start at 0
        self.E_1 -= self.E_1[0]
        self.E_2 -= self.E_2[0]
        self.E_3 -= self.E_3[0]
        self.E_4 -= self.E_4[0]
        self.E_5 -= self.E_5[0]
        self.E_6 -= self.E_6[0]

        # Calculate statistics
        self.avg_P[0] = np.mean(self.P_1)
        self.avg_P[1] = np.mean(self.P_2)
        self.avg_P[2] = np.mean(self.P_3)
        self.avg_P[3] = np.mean(self.P_4)
        self.avg_P[4] = np.mean(self.P_5)
        self.avg_P[5] = np.mean(self.P_6)

        self.std_P[0] = np.std(self.P_1)
        self.std_P[1] = np.std(self.P_2)
        self.std_P[2] = np.std(self.P_3)
        self.std_P[3] = np.std(self.P_4)
        self.std_P[4] = np.std(self.P_5)
        self.std_P[5] = np.std(self.P_6)

    # --------------------------------------------------------------------------
    #   quick_plot
    # --------------------------------------------------------------------------

    def quick_plot(self):
        """Plot the timeseries of the Wind Farm Data for quick inspection and
        save the image to disk."""

        fig = plt.figure(figsize=(16, 10), dpi=90)
        fig.suptitle(f"{self.filename}")

        ax1 = fig.add_subplot(2, 1, 1)
        ax2 = fig.add_subplot(2, 1, 2, sharex=ax1)
        cm = COLOR_MAP

        marker = "-"
        ax1.plot(self.time, self.P_1, marker, color=cm[0], label="Turbine 1")
        ax1.plot(self.time, self.P_2, marker, color=cm[1], label="Turbine 2")
        ax1.plot(self.time, self.P_3, marker, color=cm[2], label="Turbine 3")
        ax1.plot(self.time, self.P_4, marker, color=cm[3], label="Turbine 4")
        ax1.plot(self.time, self.P_5, marker, color=cm[4], label="Turbine 5")
        ax1.plot(self.time, self.P_6, marker, color=cm[5], label="Turbine 6")
        ax1.set_ylabel("Power (mW)")
        ax1.grid(True)

        marker = ".-"
        ax2.plot(self.time, self.E_1, marker, color=cm[0], label="_Turbine 1")
        ax2.plot(self.time, self.E_2, marker, color=cm[1], label="_Turbine 2")
        ax2.plot(self.time, self.E_3, marker, color=cm[2], label="_Turbine 3")
        ax2.plot(self.time, self.E_4, marker, color=cm[3], label="_Turbine 4")
        ax2.plot(self.time, self.E_5, marker, color=cm[4], label="_Turbine 5")
        ax2.plot(self.time, self.E_6, marker, color=cm[5], label="_Turbine 6")
        ax2.set_ylabel("Accumulated energy (J)")
        ax2.set_xlabel("Time (s)")
        ax2.grid(True)

        fig.legend()

        # Save figure to disk
        file_parts = os.path.splitext(self.filepath)
        fig.savefig(f"{file_parts[0]}.png", dpi=120)
        fig.savefig(f"{file_parts[0]}.pdf")
